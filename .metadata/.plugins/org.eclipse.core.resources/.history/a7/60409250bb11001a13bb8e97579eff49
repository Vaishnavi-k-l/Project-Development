package com.example.demo;

import java.util.Collection;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.model.Employee;
import com.example.demo.model.Project;
import com.example.demo.model.ProjectDescStake;
import com.example.demo.model.ProjectMember;
import com.example.demo.model.Subtask;
import com.example.demo.model.Task;
import com.example.demo.service.SubtaskService;

@RestController
public class MainController
{

	@Autowired
	private IntegrationClient integrationClient;
	
	
	//To get all employees
	@GetMapping(value="/getEmployees/{fname}")
	public List<Employee> getAllEmployees(@PathVariable (value = "fname") String fname)
	{
		return integrationClient.getEmployees(fname);
	}
	
	
	//To fetch all Project Details
	@GetMapping(value="/getProjectDetails")
	public List<Project> getAllProjects()
	{
		return integrationClient.getProjectDetiails();
	}
	
	
	
	//To fetch ongoing projects
	@GetMapping(value = "/getOngoingProjects")
	public List<Project> getOngoingProjects()
	{
		return integrationClient.getOngoingProjects();
	}
	
	//To fetch project by id from mysql
	@GetMapping(value = "/findBysqlId/{sqlId}")
	public Optional<Project> getProjectByIdSQL(@PathVariable  Long sqlId)
	{
		
		return this.integrationClient.findProjectByIdSQL(sqlId);
	}
	
	//To fetch project by id from mongo
	@GetMapping(value = "/getByIdMongo/{theId}")
	public List<ProjectDescStake> getProjectByIdMongo(@PathVariable (value ="theId") Long theId)
	{
		return this.integrationClient.findProjectByIdMongo(theId);
	}
	
	//To get projectmember details
	@GetMapping(value = "/getProjectMembers/{theId}")
	public List<ProjectMember> getProjectMemebers(@PathVariable (value="theId") Long theId)
	{
		return this.integrationClient.getAllProjectMembers(theId);
	}
	
	//To fetch tasks by projectId
	@GetMapping(value ="/getTasksById/{projectId}")
	public List<Task> getTaskByProjectId(@PathVariable (value= "projectId") Long projectId)
	{
		return this.integrationClient.getTaskByProjectId(projectId);
	}
	
	
	//To fetch all the tasks
	@GetMapping(value = "/getAllTasks")
	public List<Task> getAllTasks()
	{
		return this.integrationClient.getAllTasks();
	}
	
	
	@GetMapping(value = "/serach")
	public List<Employee> getAllEmployees()
	{
		return this.integrationClient.getAllEmployees();
	}
	
	
	//To fetch all subtasks
	@GetMapping(value="/getAllsubtasks")
	public List<Subtask> getAllsubtask()
	{
		return this.integrationClient.getAllSubtaks();
	}
	
	@RequestMapping("/updateProgress/{subtaskId}/{progressPercentage}/{comment}")
	public void updateProgress(@PathVariable(value = "subtaskId") Long subtaskId, @PathVariable(value = "progressPercentage") Long progressPercentage,
			@PathVariable(value="comment") String comment)
	{
		this.integrationClient.updateProgress(subtaskId, progressPercentage, comment);
	}
	
	
}
